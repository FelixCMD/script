if (!window.pHash && "undefined" != typeof window.API && API.getUser()) {
    var plugHash = {
        consts: {
            version: {
                major: 0,
                minor: 1,
                patch: 6,
                label: "alpha",
                string: "v0.1.7 alpha"
            },
            minSettingsVersion: {
                major: 0,
                minor: 1,
                label: "alpha",
                string: "v0.1 alpha"
            },
            links: {
                plugHash: "https://rawgit.com/plughash/script/master/plughash.min.js",
                baseURL: "https://rawgit.com/plughash/script/master/",
                langs: "",
                team: null,
                theme: null,
                css: "dark-UICSS",
                emotes: {
                    plughash: "assets/json/emotes.json"
                }
            },
            plugRoles: {
                [API.ROLE.HOST]: "host",
                [API.ROLE.COHOST]: "cohost",
                [API.ROLE.MANAGER]: "manager",
                [API.ROLE.BOUNCER]: "bouncer",
                [API.ROLE.DJ]: "residentdj",
                [API.ROLE.NONE]: "none"
            }
        },
        settings: {
            expanded: !1,
            autoJoin: !1,
            autoLeave: !1,
            autoLeavePos: null,
            autoLeaveValue: 5,
            afkEnabled: !1,
            afkMessage: null,
            accidentalNavigation: !1,
            defaultLang: "en",
            lang: null,
            chatImagesMaxSize: null,
            chatMentions: !1,
            chatMentionsArray: [API.getUser().username],
            customEmotes: !0,
            videoHidden: !1,
            videoFullscreen: !1,
            voting: {
                autoWoot: !0,
                reverseWoot: !1,
                autoMeh: !1,
                autoGrab: !1,
                silentGrab: !1,
                grabTo: null
            },
            customization: {
                legacyChat: !1,
                legacyFooter: !1,
                customMentionSound: null,
                background: null,
                chatColors: {
                    admin: null,
                    ba: null,
                    host: null,
                    cohost: null,
                    manager: null,
                    bouncer: null,
                    rdj: null,
                    subscriberGold: null,
                    subscriberSilver: null,
                    friend: null,
                    user: null,
                    self: null,
                    banned: null
                },
                defaultColors: {
                    admin: "#42a5dc",
                    ba: "#89be6c",
                    host: "#ac76ff",
                    cohost: "#ac76ff",
                    manager: "#ac76ff",
                    bouncer: "#ac76ff",
                    rdj: "#ac76ff",
                    subscriberGold: "#c59840",
                    subscriberSilver: "#8694b2",
                    friend: "#777f92",
                    user: "#777f92",
                    self: "#ffdd6f",
                    banned: "#c42e3b"
                }
            },
            staffTools: {
                chatLog: !1,
                deletedChat: !1,
                historyAlert: !1,
                durationAlert: !1,
                durationAlertLength: null
            },
            inlinePreviews: {
                images: !1,
                gifs: !1,
                videos: !1,
                audio: !1
            },
            emotes: {
                plughash: null,
                twitch: null,
                betterttv: null
            },
            notifications: {
                desktopNotifications: !1,
                join: {
                    all: !1,
                    admin: !1,
                    ba: !1,
                    staff: {
                        host: !1,
                        cohost: !1,
                        manager: !1,
                        bouncer: !1,
                        rdj: !1
                    },
                    subscriberGold: !1,
                    sinscronerSilver: !1,
                    friend: !1,
                    lvl1: !1,
                    user: !1,
                    guest: !1
                },
                leave: {
                    all: !1,
                    admin: !1,
                    ba: !1,
                    staff: {
                        host: !1,
                        cohost: !1,
                        manager: !1,
                        bouncer: !1,
                        rdj: !1
                    },
                    subscriberGold: !1,
                    sinscronerSilver: !1,
                    friend: !1,
                    lvl1: !1,
                    user: !1,
                    guest: !1
                },
                advance: {
                    lastSong: !1,
                    currentSong: !1,
                    boothAlert: !1,
                    boothAlertPos: null
                },
                currentSong: {
                    woot: !1,
                    grab: !1,
                    meh: !1
                }
            }
        },
        session: {
            timeout: {},
            interval: {},
            afkMessage: {
                chat: {
                    lastSent: 0
                },
                "private": {}
            },
            waitList: [],
            dj: null,
            currentUser: null,
            lang: {
                list: null,
                loaded: null,
                language: "en"
            },
            emotes: {
                plugHash: null
            },
            autoLeave: {
                played: 0
            },
            voteRollover: {
                vote: null
            },
            team: {}
        },
        ui: {
            buttons: [{
                type: "autoTools",
                description: "...",
                icon: "icon icon-join-waitlist",
                role: 0,
                settingsValue: function() {
                    return ""
                },
                action: function() {
                    var e = $(".plughash-MENU > .buttons-autoTasks"),
                        s = e.hasClass("expanded");
                    s ? e.animate({
                        left: "-=300px"
                    }, "fast").removeClass("expanded") : e.animate({
                        left: "+=300px"
                    }, "fast").addClass("expanded")
                }
            }, {
                type: "autoWoot",
                description: "...",
                icon: "icon icon-woot-disabled",
                subMenu: "autoTasks",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.settings.autoWoot
                },
                settingsValue: function() {
                    return plugHash.settings.voting.autoWoot ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.voting.autoWoot = !plugHash.settings.voting.autoWoot;
                    var s = e.settings.autoWoot + " " + (plugHash.settings.voting.autoWoot ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "woot-disabled"), plugHash.utils.votes.woot()
                }
            }, {
                type: "autoJoin",
                description: "...",
                icon: "icon icon-join-waitlist",
                subMenu: "autoTasks",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.settings.autoJoin
                },
                settingsValue: function() {
                    return plugHash.settings.autoJoin ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.autoJoin = !plugHash.settings.autoJoin;
                    var s = e.settings.autoJoin + " " + (plugHash.settings.autoJoin ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "join-waitlist"), plugHash.events.modules.utils.joinBooth()
                }
            }, {
                type: "autoLeave",
                description: "...",
                icon: "icon icon-leave-waitlist",
                subMenu: "autoTasks",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.settings.autoLeave
                },
                settingsValue: function() {
                    return plugHash.settings.autoLeave ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.autoLeave = !plugHash.settings.autoLeave;
                    var s = e.settings.autoLeave + " " + (plugHash.settings.autoLeave ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "join-waitlist")
                }
            }, {
                type: "autoGrab",
                description: "...",
                icon: "icon icon-grab-disabled",
                subMenu: "autoTasks",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.settings.autoGrab
                },
                settingsValue: function() {
                    return plugHash.settings.voting.autoGrab ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.voting.autoGrab = !plugHash.settings.voting.autoGrab;
                    var s = e.settings.autoGrab + " " + (plugHash.settings.voting.autoGrab ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "grab-disabled"), plugHash.utils.votes.grab(plugHash.settings.voting.silentGrab)
                }
            }, {
                type: "reverseWoot",
                description: "...",
                icon: "icon icon-woot-disabled",
                role: 0,
                settingsValue: function() {
                    return plugHash.settings.voting.reverseWoot ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.voting.reverseWoot = !plugHash.settings.voting.reverseWoot;
                    var s = e.settings.reverseWoot + " " + (plugHash.settings.voting.reverseWoot ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "woot-disabled")
                }
            }, {
                type: "silentGrab",
                description: "...",
                icon: "icon icon-grab-disabled",
                role: 0,
                settingsValue: function() {
                    return plugHash.settings.voting.silentGrab ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.voting.silentGrab = !plugHash.settings.voting.silentGrab;
                    var s = e.settings.silentGrab + " " + (plugHash.settings.voting.silentGrab ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "grab-disabled"), plugHash.settings.voting.autoGrab && plugHash.utils.votes.grab(plugHash.settings.voting.silentGrab)
                }
            }, {
                type: "chatNotifications",
                description: "...",
                icon: "icon icon-ignore",
                role: 0,
                settingsValue: function() {
                    return ""
                },
                action: function() {
                    var e = $(".plughash-MENU > .buttons-notifications"),
                        s = e.hasClass("expanded");
                    s ? e.animate({
                        left: "-=300px"
                    }, "fast").removeClass("expanded") : e.animate({
                        left: "+=300px"
                    }, "fast").addClass("expanded")
                }
            }, {
                type: "userWoots",
                description: "...",
                icon: "icon icon-woot",
                subMenu: "notifications",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.notifications.user.userWoots
                },
                settingsValue: function() {
                    return plugHash.settings.notifications.currentSong.woot ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.notifications.currentSong.woot = !plugHash.settings.notifications.currentSong.woot;
                    var s = e.notifications.user.userWoots + " " + (plugHash.settings.notifications.currentSong.woot ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "woot")
                }
            }, {
                type: "userMehs",
                description: "...",
                icon: "icon icon-meh",
                subMenu: "notifications",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.notifications.user.userMehs
                },
                settingsValue: function() {
                    return plugHash.settings.notifications.currentSong.meh ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.notifications.currentSong.meh = !plugHash.settings.notifications.currentSong.meh;
                    var s = e.notifications.user.userMehs + " " + (plugHash.settings.notifications.currentSong.meh ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "meh")
                }
            }, {
                type: "userGrabs",
                description: "...",
                icon: "icon icon-grab",
                subMenu: "notifications",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.notifications.user.userGrabs
                },
                settingsValue: function() {
                    return plugHash.settings.notifications.currentSong.grab ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.notifications.currentSong.grab = !plugHash.settings.notifications.currentSong.grab;
                    var s = e.notifications.user.userGrabs + " " + (plugHash.settings.notifications.currentSong.grab ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "grab")
                }
            }, {
                type: "userJoin",
                description: "...",
                icon: "icon icon-community-users",
                subMenu: "notifications",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.notifications.user.userJoin
                },
                settingsValue: function() {
                    return plugHash.settings.notifications.join.user ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.notifications.join.user = !plugHash.settings.notifications.join.user;
                    var s = e.notifications.user.userJoin + " " + (plugHash.settings.notifications.join.user ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "community-users")
                }
            }, {
                type: "userLeave",
                description: "...",
                icon: "icon icon-ban",
                subMenu: "notifications",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.notifications.user.userLeave
                },
                settingsValue: function() {
                    return plugHash.settings.notifications.leave.user ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.notifications.leave.user = !plugHash.settings.notifications.leave.user;
                    var s = e.notifications.user.userLeave + " " + (plugHash.settings.notifications.leave.user ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "ban")
                }
            }, {
                type: "lastSong",
                description: "...",
                icon: "icon icon-history-white",
                subMenu: "notifications",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.notifications.songAdvance.lastSong
                },
                settingsValue: function() {
                    return plugHash.settings.notifications.advance.lastSong ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.notifications.advance.lastSong = !plugHash.settings.notifications.advance.lastSong;
                    var s = e.notifications.songAdvance.lastSong + " " + (plugHash.settings.notifications.advance.lastSong ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "history-white")
                }
            }, {
                type: "currentSong",
                description: "...",
                icon: "icon icon-current-dj",
                subMenu: "notifications",
                role: 0,
                tooltip: function() {
                    return plugHash.session.lang.loaded.notifications.songAdvance.currentSong
                },
                settingsValue: function() {
                    return plugHash.settings.notifications.advance.currentSong ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.notifications.advance.currentSong = !plugHash.settings.notifications.advance.currentSong;
                    var s = e.notifications.songAdvance.currentSong + " " + (plugHash.settings.notifications.advance.currentSong ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "current-dj")
                }
            }, {
                type: "afkMessage",
                description: "...",
                icon: "icon icon-unignore",
                role: 0,
                settingsValue: function() {
                    return plugHash.settings.afkEnabled ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.afkEnabled = !plugHash.settings.afkEnabled;
                    var s = e.settings.afkMessage + " " + (plugHash.settings.afkEnabled ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "unignore")
                }
            }, {
                type: "customMentions",
                description: "...",
                icon: "icon icon-mention",
                role: 0,
                settingsValue: function() {
                    return plugHash.settings.chatMentions ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.chatMentions = !plugHash.settings.chatMentions;
                    var s = e.settings.customMentions + " " + (plugHash.settings.chatMentions ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "mention")
                }
            }, {
                type: "customEmotes",
                description: "...",
                icon: "icon icon-emoji-on",
                role: 0,
                settingsValue: function() {
                    return plugHash.settings.customEmotes ? "" : "disabled"
                },
                action: function() {
                    var e = plugHash.session.lang.loaded;
                    plugHash.settings.customEmotes = !plugHash.settings.customEmotes;
                    var s = e.settings.customEmotes + " " + (plugHash.settings.customEmotes ? e.misc.enabled : e.misc.disabled);
                    plugHash.utils.addChat("log", s, "emoji-on")
                }
            }, {
                type: "kill",
                description: "...",
                icon: "icon icon-dialog-close",
                role: 0,
                settingsValue: function() {
                    return ""
                },
                action: function() {
                    plugHash.kill()
                }
            }],
            loadUI: function() {
                var e = plugHash.session.lang.loaded;
                $("body").append('<div id="plughash-UI"></div>'), $("#plughash-UI").append('<div class="plughash-MENU"><button type="button" id="expand-menu" class="expand button" data-tooltip="Hide/Show Menu"><i class="icon icon-swap"></i></button><div id="button-options" class="expanded buttons"></div><div id="button-notifications" class="buttons-notifications"></div><div id="button-autoTasks" class="buttons-autoTasks"></div></div>'), $.each(plugHash.ui.buttons, function(s, t) {
                    (t.role <= API.getUser().role || t.role <= API.getUser().gRole) && ($(t.subMenu ? "#button-" + t.subMenu : "#button-options").append('<button type="button" id="' + t.type + '" data-tooltip="' + (t.tooltip ? t.tooltip() : e.settings[t.type]) + '" class="' + (t.subMenu ? t.subMenu + " " : "") + t.type + " button " + t.settingsValue() + '"><i class="' + t.icon + '"></i></button>'), $("#" + t.type).on("click", function() {
                        t.action(), $(this).hasClass("disabled") ? $(this).removeClass("disabled") : $(this).addClass("disabled"), plugHash && plugHash.storage.save()
                    }))
                }), $("#expand-menu").on("click", function() {
                    var e = $(".plughash-MENU > .buttons"),
                        s = $(".plughash-MENU > .buttons-notifications"),
                        t = $(".plughash-MENU > .buttons-autoTasks"),
                        a = ($(".plughash-MENU .expand.button"), s.hasClass("expanded")),
                        o = t.hasClass("expanded"),
                        n = e.hasClass("expanded");
                    n ? (e.animate({
                        left: "-=50px"
                    }, "fast").removeClass("expanded"), plugHash.settings.expanded = !1, a && o ? ($("#chatNotifications").click(), $("#autoTools").click()) : o ? $("#autoTools").click() : a && $("#chatNotifications").click()) : (e.animate({
                        left: "+=50px"
                    }, "fast").addClass("expanded"), plugHash.settings.expanded = !0, a && o ? ($("#chatNotifications").click(), $("#autoTools").click()) : o ? $("#autoTools").click() : a && $("#chatNotifications").click())
                }), $(".app-view").append('<div class="pop-menu vote" style="height: 234px; left: 668px; top: 268px; display: none"><div class="bar"><i class="icon icon-grab-disabled"></i><span class="title"></span><div class="bar-divider"></div></div><div class="menu" style="height: 186px;"><ul></ul></div></div>'), $(".pop-menu.vote").on("mouseout", plugHash.ui.voteRollover.voteMouseLeave).on("mouseover", function() {
                    $(this).show()
                }), $("#app").on("mouseout", plugHash.ui.voteRollover.voteMouseLeave), $("#woot, #grab, #meh").on("mouseover", plugHash.ui.voteRollover.mouseOver), $("#vote").on("mouseover", plugHash.ui.voteRollover.voteMouseOver), plugHash.ui.voteRollover.resize(), $(window).resize(plugHash.events.window.resize), $(document).on("click", ".pop-menu.vote li", plugHash.ui.voteRollover.userSelected), $("#button-options button").on("mouseover", plugHash.ui.tooltip.show), $("#button-options button").on("mouseout", plugHash.ui.tooltip.hide), $("#button-notifications button").on("mouseover", plugHash.ui.tooltip.show), $("#button-notifications button").on("mouseout", plugHash.ui.tooltip.hide), $("#button-autoTasks button").on("mouseover", plugHash.ui.tooltip.show), $("#button-autoTasks button").on("mouseout", plugHash.ui.tooltip.hide), $(document).on("mouseover", ".rank", plugHash.ui.roles.showTooltip), $(document).on("mouseout", ".rank", plugHash.ui.roles.hideTooltip), $("#volume > .slider").on("mousewheel", plugHash.ui.volumeMousewheel)
            },
            unloadUI: function() {
                $("#plughash-UI").remove(), $("#app").off("mouseout", plugHash.ui.voteRollover.voteMouseLeave), $(".pop-menu.vote").off().remove(), $("#woot, #grab, #meh").off("mouseover", plugHash.ui.voteRollover.mouseOver), $("#vote").off("mouseover", plugHash.ui.voteRollover.voteMouseOver), $("#button-options button").off("mouseover", plugHash.ui.tooltip.show), $("#button-options button").off("mouseout", plugHash.ui.tooltip.hide), $("#button-notifications button").off("mouseover", plugHash.ui.tooltip.show), $("#button-notifications button").off("mouseout", plugHash.ui.tooltip.hide), $("#button-autoTasks button").off("mouseover", plugHash.ui.tooltip.show), $("#button-autoTasks button").off("mouseout", plugHash.ui.tooltip.hide), $(window).off("resize", plugHash.events.window.resize), $(document).off("click", ".pop-menu.vote li", plugHash.ui.voteRollover.userSelected), $(document).off("mouseover", ".rank", plugHash.ui.roles.showTooltip), $(document).off("mouseout", ".rank", plugHash.ui.roles.hideTooltip);
                var e = API.getUser(),
                    s = plugHash.modules.rollover;
                e.gRole || (s.$meta.removeClass(".has-id"), s.$meta.find(".user-id").remove()), plugHash.modules.rollover.$meta.find('i[class*="rank rank-"]').remove(), $('i[class*="rank rank-"]').remove(), $("#volume > .slider").off("mousewheel", plugHash.ui.volumeMousewheel)
            },
            loadCSS: function(e) {
                switch (e || "") {
                    case "dark-THEMECSS":
                    case "white-THEMECSS":
                    case "pink-THEMECSS":
                        $("head").append('<link id="phash-UICSS" rel="stylesheet" type="text/css" href="' + plugHash.consts.links.baseURL + "assets/css/" + e + '.css" />');
                        break;
                    case "dark-UICSS":
                    case "white-UICSS":
                    case "pink-UICSS":
                        $("head").append('<link id="phash-THEMECSS" rel="stylesheet" type="text/css" href="' + plugHash.consts.links.baseURL + "assets/css/" + e + '.css" />');
                        break;
                    default:
                        e ? $("head").append('<link id="phash-THEMECSS" rel="stylesheet" type="text/css" href="' + e + '" />') : $("head").append('<link id="phash-UICSS" rel="stylesheet" type="text/css" href="' + plugHash.consts.links.css + '" />')
                }
            },
            unloadCSS: function() {
                $("#phash-UICSS").remove(), $("#phash-THEMECSS").remove()
            },
            addDeleteButton: function(e) {
                var s = API.getUser();
                if (s && s.id == e.uid && !(Math.max(s.role, s.gRole) < API.ROLE.BOUNCER)) {
                    var t = $('div[data-cid^="' + e.cid + '"]').last();
                    if (t.length) {
                        var a = plugHash.modules.lang.chat["delete"];
                        t.append('<div class="delete-button">' + a + "</div>"), t.hover(function() {
                            return $(this).find(".delete-button").css("display", "block")
                        }), t.mouseleave(function() {
                            return $(this).find(".delete-button").css("display", "none")
                        }), t.find(".delete-button").on("click", function() {
                            plugHash.utils.deleteChat(e.cid)
                        })
                    }
                }
            },
            getUserIcon: function(e) {
                if (e.gRole) return e.gRole < API.ROLE.HOST ? "ambassador" : "admin";
                if (API.ROLE.NONE == e.role) {
                    if (e.sub) return "subscriber";
                    if (e.silver) return "silver-subscriber"
                }
                return API.ROLE.HOST == e.role || API.ROLE.COHOST == e.role ? "host" : API.ROLE.MANAGER == e.role ? "manager" : API.ROLE.BOUNCER == e.role ? "bouncer" : API.ROLE.DJ == e.role ? "dj" : ""
            },
            voteRollover: {
                resize: function(e) {
                    /*var s = {
                            left: 0,
                            top: 0
                        },
                        t = $(document),
                        a = t.find("#vote"),
                        o = t.find(".pop-menu"),
                        n = parseInt(o.css("width").match(/\d{1,}/)[0]),
                        i = parseInt(a.css("width").match(/\d{1,}/)[0]),
                        l = a;
                    if (t.find("#video-only-dj").length || t.find(".popout").length) {
                        switch (plugHash.session.voteRollover.vote) {
                            case -1:
                                l = t.find("#meh");
                                break;
                            case 0:
                                l = t.find("#grab");
                                break;
                            default:
                                l = t.find("#woot")
                        }
                        var u = parseInt(l.css("width").match(/\d{1,}/)[0]),
                            r = n - u,
                            g = a.offset();
                        s.left = l.offset().left - r / 2, g.left + i < s.left + n && (s.left = g.left + i - n)
                    } else {
                        var u = parseInt(l.css("width").match(/\d{1,}/)[0]),
                            r = n - u;
                        s.left = l.offset().left - r / 2
                    }
                    s.left < 0 && (s.left = 0), s.top = l.offset().top - 234, s.left = s.left + "px", s.top = s.top + "px", t.find(".pop-menu.vote").css(s)
					*/
                },
                mouseOver: function() {
                    plugHash.ui.voteRollover.list($(this).attr("id"))
                },
                voteMouseOver: function() {
                    plugHash.ui.voteRollover.resize(), $(this).parents().last().find(".pop-menu.vote").show()
                },
                voteMouseLeave: function() {
                    $(this).parents().last().find(".pop-menu.vote").hide(), plugHash.session.voteRollover.vote = null
                },
                vote: function(e) {
                    plugHash.session.voteRollover.vote == e.vote && plugHash.ui.voteRollover.updvote(e.vote)
                },
                grab: function(e) {
                    0 == plugHash.session.voteRollover.vote && plugHash.ui.voteRollover.updvote(0)
                },
                updvote: function() {
                    var e = API.getUsers().filter(function(e) {
                            return plugHash.session.voteRollover.vote ? e.vote == plugHash.session.voteRollover.vote : e.grab
                        }),
                        s = "",
                        t = "";
                    for (var a in e) t = plugHash.ui.getUserIcon(e[a]), s += "<li>" + (t ? '<i class="icon icon-chat-' + t + '"></i>' : "") + '<span class="' + t + '">' + _.escape(e[a].username) + "</span></li>";
                    var o = $(document);
                    o.find(".pop-menu.vote .menu > ul").html(s)
                },
                list: function(e) {
                    var s = "woot" == e ? 1 : "meh" == e ? -1 : 0;
                    if (s != plugHash.session.voteRollover.vote) {
                        plugHash.session.voteRollover.vote = s;
                        var t = $(document);
                        t.find(".pop-menu.vote .bar .icon").attr("class", "icon icon-" + e + "-disabled"), t.find(".pop-menu.vote .bar .title").text(t.find("#" + e).find(".top .label").text()), plugHash.ui.voteRollover.updvote(plugHash.session.voteRollover.vote)
                    }
                },
                userSelected: function(e) {
                    var s = plugHash.modules.users.findWhere({
                        username: $(this).find("span").text()
                    });
                    s && plugHash.modules.rollover.showChat(s, {
                        x: e.pageX,
                        y: e.pageY
                    })
                }
            },
            tooltip: {
                show: function(e) {
                    var s = $(this);
                    plugHash.modules.events.trigger("tooltip:show", e.currentTarget.attributes[2].value, s)
                },
                hide: function(e) {
                    var s = $(this);
                    plugHash.modules.events.trigger("tooltip:hide", e.currentTarget.attributes[2].value, s)
                }
            },
            roles: {
                showTooltip: function(e) {
                    var s = ($(this).attr("class").match(/rank-(.*)(\s|$)/) || [])[1];
                    if (s) {
                        var t = plugHash.session.lang.loaded,
                            a = t.plugHashRoles[s];
                        if ("rankwhore" == s) {
                            var o = t.plugHashRoles.whoreTitles;
                            o.length && (a = o[Math.round(100 * Math.random() % (o.length - 1))])
                        }
                        plugHash.modules.events.trigger("tooltip:show", a, $(this))
                    }
                },
                hideTooltip: function(e) {
                    plugHash.modules.events.trigger("tooltip:hide")
                }
            },
            volumeMousewheel: function(e) {
                e.originalEvent.wheelDelta > 0 ? API.setVolume(API.getVolume() + 1) : API.setVolume(API.getVolume() - 1)
            }
        },
        utils: {
            addLog: function(e, s, t) {
                $("#chat-messages")
            },
            addSpecial: function(e, s, t, a) {
                var o = plugHash.modules.settings.settings.chatTimestamps,
                    n = plugHash.modules.util.getChatTimestamp(24 == o),
                    i = {
                        type: "phash special-" + (e ? e : "log"),
                        message: s || plugHash.session.lang.loaded.misc.msgerror,
                        uid: a ? a.id : 13437704,
                        un: a ? a.username : "plug#",
                        timestamp: n,
                        cid: "phash-" + Math.floor(0x4bffe996c5d15 * Math.random())
                    };
                plugHash.modules.chat.chatView.onReceived(i), $("[data-cid=" + i.cid + "] .delete-button").off().remove(), $("[data-cid=" + i.cid + "] .badge-box").children().remove(), $("[data-cid=" + i.cid + "] .badge-box").removeClass("no-badge"), $("[data-cid=" + i.cid + "] .badge-box").append('<i class="' + t + '"></i>'), $("#chat-messages").scrollTop($("#chat-messages").prop("scrollHeight"))
            },
            addChat: function(e, s, t, a) {
                var o = plugHash.modules.settings.settings.chatTimestamps,
                    n = plugHash.modules.util.getChatTimestamp(24 == o),
                    i = {
                        type: "phash plughash-" + (e ? e : "log"),
                        message: s || plugHash.session.lang.loaded.misc.msgerror,
                        uid: a ? a.id : 13437704,
                        un: a ? _.escape(a.username) : "plug#",
                        timestamp: n,
                        cid: "phash-" + Math.floor(0x4bffe996c5d15 * Math.random())
                    };
                plugHash.modules.chat.chatView.onReceived(i), $("[data-cid=" + i.cid + "] .delete-button").off().remove(), $("[data-cid=" + i.cid + "] .badge-box").children().remove(), $("[data-cid=" + i.cid + "] .badge-box").removeClass("no-badge"), $("[data-cid=" + i.cid + "] .badge-box").append('<i class="icon icon-' + t + '"></i>'), $("#chat-messages").scrollTop($("#chat-messages").prop("scrollHeight"))
            },
            customMention: function(e) {
                var s = [],
                    t = plugHash.settings.chatMentionsArray;
                for (var a in t) - 1 != e.message.indexOf(t[a]) && -1 == s.indexOf(t[a]) && s.push(t[a]);
                if (s.length) {
                    e.type = "mention", e.sound = "mention", "undefined" == typeof e.mentions && (e.mentions = []);
                    for (var a in s) - 1 == e.mentions.indexOf(s[a]) && (e.mentions.push(s[a]), e.message.replace(new RegExp(RegExp.escape(s[a]), "g"), '<span class="name">' + s[a] + "</span>"))
                }
            },
            getLangs: function(e) {
                "function" == typeof e && $.getJSON(plugHash.consts.links.baseURL + "assets/json/lang.json", function(s) {
                    plugHash.session.lang.list = s, e(s)
                })
            },
            loadLang: function(e, s) {
                if ("string" == typeof e && "function" == typeof s) {
                    if (!plugHash.session.lang.list) return void this.getLangs(function() {
                        plugHash.utils.loadLang(e, s)
                    });
                    plugHash.session.lang.list.hasOwnProperty(e) || (e = plugHash.settings.defaultLang), $.getJSON(plugHash.consts.links.baseURL + "assets/json/languages/" + e + ".json", function(e) {
                        plugHash.session.lang.loaded = e, s(e)
                    })
                }
            },
            replaceLang: function(e, s) {
                return "string" != typeof e ? "[ERR] Invalid text" : s && "object" == typeof s ? ($.each(s, function(s, t) {
                    e = e.replace("%%" + s.toUpperCase() + "%%", t)
                }), e) : e
            },
            team: {
                loadTeam: function(e) {
                    $.getJSON(plugHash.consts.links.baseURL + "assets/json/team.json", function(s) {
                        plugHash.session.team = s, "function" == typeof e && e(s)
                    })
                },
                getRole: function(e) {
                    var s = [];
                    return plugHash.session.team ? ($.each(plugHash.session.team, function(t, a) {
                        -1 != a.users.indexOf(e) && s.push(t)
                    }), s) : s
                }
            },
            emotes: {
                getEmotes: function(e) {
                    $.getJSON(plugHash.consts.links.baseURL + plugHash.consts.links.emotes.plughash, function(s) {
                        plugHash.session.emotes = s, "function" == typeof e && e(s)
                    })
                },
                replace: function(e, s, t) {
                    var a = e.message.match(/:(.*?):/g);
                    a && a.forEach(function(a) {
                        var o = a.slice(1, -1).toLowerCase();
                        if (s.hasOwnProperty(o)) {
                            var n = {
                                url: s[o].hasOwnProperty("url") ? s[o].url : s._template.url.replace("{code}", s[o]),
                                width: s[o].hasOwnProperty("width") ? s[o].width : s._template.width,
                                height: s[o].hasOwnProperty("height") ? s[o].height : s._template.height
                            };
                            e.message = e.message.replace(new RegExp(a, "gi"), function(e) {
                                return '<div class="custom-emote" title="&#58;' + o + '&#58;" style="background-image:url(' + n.url + "); background-repeat: no-repeat; " + (t ? "background-size: contain;" : "") + " width:" + n.width + "; height:" + n.height + ';"></div>'
                            })
                        }
                    })
                },
                replaceEmotes: function(e) {
                    var s = $("#chat-messages"),
                        t = s.scrollTop() > s[0].scrollHeight - s.height() - 28;
                    plugHash.session.emotes.plughash && this.replace(e, plugHash.session.emotes.plughash), plugHash.session.emotes.twitch && this.replace(e, plugHash.session.emotes.twitch, !0), t && s.scrollTop(s[0].scrollHeight)
                }
            },
            ajax: function(e, s, t, a) {
                var o = $.ajax({
                    type: s || "GET",
                    url: "/_/" + e.toLowerCase(),
                    contentType: t ? "application/json" : void 0,
                    data: t ? JSON.stringify(t) : void 0
                });
                "function" == typeof a && (o.done(function(e) {
                    a(null, e)
                }), o.fail(function(e, s) {
                    a({
                        jqXHR: e,
                        textStatus: s
                    })
                }))
            },
            deleteChat: function(e) {
                plugHash.utils.ajax("chat/" + e, "DELETE")
            },
            getUser: function(e, s) {
                if (isNaN(e)) {
                    var t = API.getUsers().filter(function(s) {
                        return s.username == e
                    })[0] || null;
                    if ("function" != typeof s) return t;
                    s(t)
                } else "function" == typeof s && plugHash.utils.ajax("USERS/" + e, "GET", void 0, function(e, t) {
                    return s(e ? null : t.data[0])
                })
            },
            getPlaylist: function(e, s) {
                plugHash.utils.ajax("PLAYLISTS/" + e + "/MEDIA", "GET", void 0, function(e, t) {
                    return t = t.data, s(e ? null : t)
                })
            },
            getPlaylists: function(e) {
                plugHash.utils.ajax("PLAYLISTS", "GET", void 0, function(s, t) {
                    return t = t.data, e(s ? null : t)
                })
            },
            addToPlaylist: function(e, s, t, a) {
                s.id = 0, plugHash.utils.ajax("PLAYLISTS/" + e + "/MEDIA/INSERT", "POST", {
                    media: [s],
                    append: t || !1
                }, function(s, o) {
                    t && !s && o && o.data && plugHash.utils.getPlaylist(e, function(s) {
                        s && s.length && plugHash.utils.ajax("PLAYLISTS/" + e + "/MEDIA/MOVE", "PUT", {
                            ids: [s[0].id],
                            beforeID: -1
                        })
                    }), a && "function" == typeof a && a(s ? s : null, o.data[0])
                })
            },
            isLocked: function() {
                return plugHash.modules.booth.isLocked
            },
            isCycling: function() {
                return plugHash.modules.booth.shouldCycle
            },
            media: {
                addYoutubeVideo: function(e, s, t) {
                    if (!plugHash.modules.playlists.get(s)) return !1;
                    var a = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|\&v=)([^#\&\?]*).*/,
                        o = e.match(a);
                    return o && 11 == o[2].length ? ($.getJSON("https://www.googleapis.com/youtube/v3/videos?id=" + o[2] + "&part=snippet,contentDetails,statistics,status&key=AIzaSyCXdCG_sDuHISSSFcbUmJatH70nS9NYnTs", function(e) {
                        if (!e || !e.items || !e.items.length) return void("function" == typeof t && t(null));
                        var a = e.items[0],
                            o = a.contentDetails.duration.match(/^P([0-9]+D|)?T?([0-9]+H|)?([0-9]+M|)?([0-9]+S|)?$/).reverse();
                        o.pop();
                        var n = {
                                id: 0,
                                format: 1,
                                cid: a.id,
                                author: "",
                                title: "",
                                image: a.snippet.thumbnails["default"].url,
                                duration: 0
                            },
                            i = a.snippet.title,
                            l = i.indexOf("-"),
                            u = [1, 60, 3600, 86400];
                        l > 0 ? (n.author = i.substr(0, l).trim(), n.title = i.substr(l + 1).trim()) : (n.author = a.snippet.channelTitle, n.title = i), o.forEach(function(e, s) {
                            e && (n.duration += parseInt(e.match(/\d{1,}/)[0]) * u[s])
                        }), n.duration = n.duration || 5184000, plugHash.utils.addToPlaylist(s, n, !1, function(e) {
                            "function" == typeof t && t(e ? null : n)
                        })
                    }).fail(function() {
                        "function" == typeof t && t(null)
                    }), !0) : !1
                },
                addSoundCloudSong: function(e, s, t) {}
            },
            votes: {
                woot: function(e) {
                    var s = API.getUser();
                    if (plugHash.modules.media && s && 1 != s.vote) {
                        var t = plugHash.settings.voting.reverseWoot;
                        (!t || e === !0 && t) && $(".btn-like").click()
                    }
                },
                meh: function() {
                    var e = API.getUser();
                    plugHash.modules.media && e && -1 != e.vote && $("#meh").click()
                },
                grab: function(e, s) {
                    "boolean" == typeof e && (s = e, e = null);
                    var t = plugHash.modules.playlists.getActiveID();
                    e = e || plugHash.settings.voting.grabTo || t;
                    var a = plugHash.modules.media,
                        o = API.getUser(),
                        n = API.getDJ();
                    if (e && a && o && !o.grab && n && n.id != o.id)
                        if (s) plugHash.utils.addToPlaylist(e, a, t == e);
                        else {
                            var i = plugHash.modules.playlists.get(e);
                            if (!i) return;
                            i = i.toJSON(), $("#grab").click();
                            var l = $(".pop-menu.grab li");
                            l.filter(function(e) {
                                return $(l[e]).find("span").text() == i.name
                            }).trigger("mousedown")
                        }
                }
            }
        },
        commands: {
            shrug: function(e, s) {
                API.sendChat(s.join(" ") + " ¯\\_(ツ)_/¯")
            },
            lenny: function(e, s) {
                API.sendChat(s.join(" ") + " ( ͡° ͜ʖ ͡°)")
            },
            cat: function(e, s) {
                API.sendChat(s.join(" ") + " =^.^=")
            },
            crazy: function(e, s) {
                API.sendChat(s.join(" ") + " {{{(>_<)}}}")
            },
            coolsong: function(e, s) {
                API.sendChat(s.join(" ") + " d(^_^)b")
            },
            cry: function(e, s) {
                API.sendChat(s.join(" ") + " (╥﹏╥)")
            },
            yuno: function(e, s) {
                API.sendChat(s.join(" ") + " ლ(ಠ益ಠლ)")
            },
            bearface: function(e, s) {
                API.sendChat(s.join(" ") + " ʕ•ᴥ•ʔ")
            },
            wtf: function(e, s) {
                API.sendChat(s.join(" ") + " ಠ_ಠ")
            },
            iamfine: function(e, s) {
                API.sendChat(s.join(" ") + " ⁀‿⁀")
            },
            iamangry: function(e, s) {
                API.sendChat(s.join(" ") + " ╰_╯")
            },
            facepalm: function(e, s) {
                API.sendChat(s.join(" ") + " (>ლ)")
            },
            shy: function(e, s) {
                API.sendChat(s.join(" ") + " (｡◕‿◕｡)")
            },
            dwi: function(e, s) {
                API.sendChat(s.join(" ") + " (⌐■_■)")
            },
            x1: function(e, s) {
                API.sendChat(s.join(" ") + " (ง'̀-'́)ง")
            },
            machoman: function(e, s) {
                API.sendChat(s.join(" ") + " ᕦ( ͡° ͜ʖ ͡°)ᕤ")
            },
            runsong: function(e, s) {
                API.sendChat(s.join(" ") + " ᕕ(⌐■_■)ᕗ ♪♬")
            },
            gasp: function(e, s) {
                API.sendChat(s.join(" ") + " (ʘᗩʘ’)")
            },
            creepy: function(e, s) {
                API.sendChat(s.join(" ") + " ╭(ʘ̆~◞౪◟~ʘ̆)╮")
            },
            pls: function(e, s) {
                API.sendChat(s.join(" ") + " 〳 •́ ﹏ •̀ 〵")
            },
            partyover: function(e, s) {
                API.sendChat(s.join(" ") + " ᕕ{ ͒ ʖ̯ ͒ }ᕗ")
            },
            aww: function(e, s) {
                API.sendChat(s.join(" ") + " ʕ ಡ ﹏ ಡ ʔ")
            },
            wise: function(e, s) {
                API.sendChat(s.join(" ") + " (҂ ˘ _ ˘ )")
            },
            "this": function(e, s) {
                API.sendChat(s.join(" ") + " ☜(ﾟヮﾟ☜)")
            },
            squad: function(e, s) {
                API.sendChat(s.join(" ") + " ヽ༼ ຈل͜ຈ༼ ▀̿̿Ĺ̯̿̿▀̿ ̿༽Ɵ͆ل͜Ɵ͆ ༽ﾉ")
            },
            itsmagic: function(e, s) {
                API.sendChat(s.join(" ") + " (⊃｡•́‿•̀｡)⊃━☆ﾟ.*･｡ﾟ")
            },
            wat: function(e, s) {
                API.sendChat(s.join(" ") + " ʕ ͠° ʖ̫ °͠ ʔ")
            },
            whatever: function(e, s) {
                API.sendChat(s.join(" ") + " ¯\\_(⊙_ʖ⊙)_/¯")
            },
            m8: function(e, s) {
                API.sendChat(s.join(" ") + " ლ ( ◕ ᗜ ◕ ) ლ")
            },
            cool: function(e, s) {
                API.sendChat(s.join(" ") + " s( ^ ‿ ^)-b")
            },
            praise: function(e, s) {
                API.sendChat(s.join(" ") + " ༼つ ◕_◕ ༽つ")
            },
            gary: function(e, s) {
                API.sendChat(s.join(" ") + " ᕕ( ᐛ )ᕗ")
            },
            lmgtfy: function(e, s) {
                API.sendChat("http://lmgtfy.com/?q=" + encodeURIComponent(s.join(" ")).replace(/%20/g, "+"))
            },
            vol: function(e, s) {
                var t = parseInt(s.shift());
                isNaN(t) || 0 > t || t > 100 || API.setVolume(t)
            },
            afk: function(e, s) {
                var t = plugHash.session.lang.loaded;
                return 0 == s.length ? plugHash.utils.addChat("success", t.settings.afkMessage + ": " + (plugHash.settings.afkMessage || t.settings.afkMessageDefault), "unignore") : (plugHash.settings.afkMessage = s.join(" "), void plugHash.utils.addChat("success", t.settings.afkMessage + ": " + plugHash.settings.afkMessage, "unignore"))
            },
            autoleave: function(e, s) {
                var t = plugHash.session.lang.loaded;
                if (0 == s.length) return void(plugHash.settings.autoLeave ? plugHash.utils.addChat("success", t.settings.autoLeave + ": " + plugHash.session.autoLeave.played + "/" + plugHash.settings.autoLeavePos, "leave-waitlist") : plugHash.utils.addChat("success", t.settings.autoLeave + ": " + t.misc.disabled, "leave-waitlist"));
                var a = parseInt(s.shift());
                isNaN(a) || 1 > a || (plugHash.settings.autoLeavePos = a, plugHash.session.autoLeave.played = 0, plugHash.utils.addChat("success", t.settings.autoLeave + ": " + plugHash.session.autoLeave.played + "/" + plugHash.settings.autoLeavePos, "leave-waitlist"))
            },
            addvideo: function(e, s) {
                if (s.length < 2) return plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.addvideo.insufficientArgs, "playlist-small");
                var t = s.shift(),
                    a = s.join(" "),
                    o = plugHash.modules.playlists.findWhere({
                        name: a
                    });
                return o ? void(plugHash.utils.media.addYoutubeVideo(t, o.get("id"), function(e) {
                    e ? plugHash.utils.addChat("success", plugHash.utils.replaceLang(plugHash.session.lang.loaded.commands.addvideo.added, {
                        author: e.author,
                        title: e.title,
                        playlistname: a
                    }), "playlist-small") : plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.addvideo.failed, "playlist-small")
                }) || plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.addvideo.failed, "playlist-small")) : plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.addvideo.playlistNotFound, "playlist-small")
            },
            addsong: function(e, s) {},
            move: function(e, s) {
                var t = s.splice(s.length - 1),
                    a = s.join(" ");
                a = a.replace("@", ""), self = API.getUser(), plugHash.utils.getUser(a, function(e) {
                    return null == e ? plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.noperm, "x-gray") : void(self.role >= API.ROLE.MANAGER || self.gRole >= API.ROLE.MANAGER ? isNaN(parseInt(t)) ? plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.error, "chat-system") : API.getDJ().id != a.id && (-1 != API.getWaitListPosition(e.id) ? API.moderateMoveDJ(e.id, parseInt(t)) : (API.moderateAddDJ(e.id), setTimeout(function() {
                        API.moderateMoveDJ(e.id, parseInt(t))
                    }, 500))) : plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.error, "chat-system"))
                })
            },
            add: function(e, s) {
                var t = s.join(" ").substr(1),
                    a = plugHash.utils.isLocked(),
                    o = API.getUser(),
                    n = API.getDJ();
                plugHash.utils.getUser(t, function(e) {
                    return null == e ? plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.error, "chat-system") : void((o.role >= API.ROLE.BOUNCER || o.gRole >= API.ROLE.MANAGER) && n && n.id != e.id ? a && o.role >= API.ROLE.MANAGER ? API.moderateAddDJ(e.id) : a && o.role < API.ROLE.MANAGER ? plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.noperm, "x-gray") : a || API.moderateAddDJ(e.id) : plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.noperm, "x-gray"))
                })
            },
            remove: function(e, s) {
                var t = API.getUser(),
                    a = s.join(" ").substr(1),
                    o = API.getDJ();
                plugHash.utils.getUser(a, function(e) {
                    return null == e ? plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.error, "chat-system") : void(o && -1 != API.getWaitListPosition(e) && (t.role >= API.ROLE.DJ || t.gRole >= API.ROLE.MANAGER) && plugHash.utils.ajax("BOOTH/REMOVE/" + e.id, "DELETE"))
                })
            },
            skip: function(e, s) {
                var t = API.getUser(),
                    a = API.getDJ();
                t.role >= API.ROLE.BOUNCER || t.gRole >= API.ROLE.MANAGER ? a && API.ROLE.HOST != a.gRole && API.moderateForceSkip(a.id) : plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.noperm, "x-gray")
            },
            ban: function(e, s) {
                var t = API.getUser(),
                    a = s.join(" ").substr(1);
                plugHash.utils.getUser(a, function(e) {
                    return console.log(e), null == e ? plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.error, "chat-system") : void((t.role >= API.ROLE.MANAGER || t.gRole >= API.ROLE.MANAGER) && plugHash.utils.ajax("BANS/ADD", "POST", {
                        userID: e.id,
                        reason: 1,
                        duration: "f"
                    }))
                })
            },
            kick: function(e, s) {
                if (!(s.length < 2)) {
                    1 == s.length && s.push("day");
                    var t = API.getUser(),
                        a = "hour" == s.pop().toLowerCase() ? "h" : "d",
                        o = s.join(" ").replace("@", "");
                    plugHash.utils.getUser(o, function(e) {
                        return null == e ? plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.error, "chat-system") : void((t.role >= API.ROLE.BOUNCER || t.gRole >= API.ROLE.MANAGER) && plugHash.utils.ajax("BANS/ADD", "POST", {
                            userID: e.id,
                            reason: 1,
                            duration: a
                        }))
                    })
                }
            },
            clearchat: function(e, s) {
                var t = API.getUser(),
                    a = $("#chat-messages > .cm[data-cid]");
                if (t.role >= API.ROLE.BOUNCER || t.gRole >= API.ROLE.MANAGER)
                    for (var o = 0; o < a.length; o++) {
                        var n = a[o].getAttribute("data-cid");
                        n && -1 == n.indexOf("phash") && plugHash.utils.deleteChat(n), o == a.length - 1 && API.sendChat("/em [/clearchat] " + (plugHash.session.lang.loaded.commands.clearchat ? plugHash.session.lang.loaded.commands.clearchat : "Chat cleared"))
                    } else plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.noperm, "x-gray")
            },
            "delete": function(e, s) {
                var t = API.getUser(),
                    a = s.join(" ").replace("@", ""),
                    o = $(".cm.message").filter(function(e, s) {
                        return $(s).find(".un").text() == a
                    });
                if (t.role >= API.ROLE.BOUNCER || t.gRole >= API.ROLE.MANAGER)
                    if ("emotes" == a || "emoji" == a) $("#chat-messages").children("[data-cid]").each(function() {
                        $(this).find(".text").text().split(":").length > 2 && plugHash.utils.deleteChat($(this).attr("data-cid"))
                    });
                    else
                        for (var n = 0; n < o.length; n++) {
                            var i = o[n].getAttribute("data-cid").split("-");
                            plugHash.utils.getUser(a, function(e) {
                                i[0] == e.id && plugHash.utils.deleteChat(i.join("-")), n == o.length - 1 && API.sendChat("/em [/delete @" + e.username + "] " + (plugHash.session.lang.loaded.commands["delete"] ? plugHash.session.lang.loaded.commands["delete"] : "Deleted ."))
                            })
                        } else plugHash.utils.addChat("error", plugHash.session.lang.loaded.commands.noperm, "x-gray")
            },
            whois: function(e, s) {
                if (0 != s.length) {
                    var t = s.join(" ");
                    "@" == t.charAt(0) && (t = t.substr(1)), plugHash.utils.getUser(t, function(e) {
                        if (!e) return console.log("Failed to get user");
                        var s = API.getWaitListPosition(e.id),
                            t = (e.username ? "" : "<br/>No username") + "<br/>ID: " + e.id + "<br/>Joined: " + new Date(e.joined).toLocaleString() + " UTC<br/>Level: " + e.level + "<br/>Language: " + (e.language ? e.language : "Not set (null)") + "<br/>WaitList spot: " + (-1 == s ? "Not in WaitList" : s + 1) + "<br/>" + (e.sub ? "Golden subscriber<br/>" : e.silver ? "Silver subscriber<br/>" : "Not a subscriber<br/>") + (e.slug ? 'Profile: <a href="/@/' + e.slug + '" target="_blank">Click here</a>' : "");
                        plugHash.utils.addChat("success", t, "filter", e.username ? e : null)
                    })
                }
            },
            link: function(e, s) {
                var t = API.getDJ(),
                    a = API.getMedia();
                t && (2 == a.format ? SC.get("/tracks/" + a.cid, function(e) {
                    plugHash.utils.addChat("log", '<a href="' + e.permalink_url + '" target="_blank">' + a.author + " - " + a.title + "</a>", "filter")
                }) : plugHash.utils.addChat("log", '<a href="https://youtu.be/' + a.cid + '" target="_blank">' + a.author + " - " + a.title + "</a>", "filter"))
            },
            reload: function(e, s) {
                $.getScript(plugHash.consts.links.plugHash), plugHash.kill()
            },
            kill: function(e, s) {
                plugHash.kill()
            }
        },
        events: {
            API: {
                _advance: function(e) {
                    var s = plugHash.session.lang.loaded;
                    if (e.media && (plugHash.settings.voting.autoWoot && plugHash.utils.votes.woot(), plugHash.settings.voting.autoMeh && plugHash.utils.votes.meh(), plugHash.settings.voting.autoGrab && plugHash.utils.votes.grab(plugHash.settings.voting.silentGrab)), e.lastPlay) {
                        var t = API.getUser(),
                            a = e.lastPlay;
                        if (t && a.dj && a.dj.id == t.id && plugHash.settings.autoLeave && (plugHash.session.autoLeave.played++, plugHash.settings.autoLeavePos === plugHash.session.autoLeave.played && (plugHash.session.autoLeave.played = 0, plugHash.settings.autoJoin && $("#autoJoin").click(), API.djLeave(), $("#autoLeave").click())), plugHash.settings.notifications.advance.lastSong) {
                            var o;
                            2 == a.media.format ? SC.get("/tracks/" + a.media.cid, function(e) {
                                o = s.notifications.songAdvance.played + '<a href="' + e.permalink.url + '" target="_blank">' + _.escape(a.media.author + " - " + a.media.title) + "</a> (" + a.score.positive + "W/" + a.score.grabs + "G/" + a.score.negative + "M)", plugHash.utils.addChat("log", o, "history-white", a.dj)
                            }) : (o = s.notifications.songAdvance.played + '<a href="https://youtu.be/' + a.media.cid + '" target="_blank">' + _.escape(a.media.author + " - " + a.media.title) + "</a> (" + a.score.positive + "W/" + a.score.grabs + "G/" + a.score.negative + "M)", plugHash.utils.addChat("log", o, "history-white", a.dj))
                        }
                    }
                    if (e.media && e.dj && plugHash.settings.notifications.advance.currentSong) {
                        var o;
                        2 == e.media.format ? SC.get("/tracks/" + e.media.cid, function(t) {
                            o = s.notifications.songAdvance.playing + '<a href="' + t.permalink.url + '" target="_blank">' + _.escape(e.media.author + " - " + e.media.title) + "</a>", plugHash.utils.addChat("log", o, "current-dj", e.dj)
                        }) : (o = s.notifications.songAdvance.playing + '<a href="https://youtu.be/' + e.media.cid + '" target="_blank">' + _.escape(e.media.author + " - " + e.media.title) + "</a>", plugHash.utils.addChat("log", o, "current-dj", e.dj))
                    }
                    plugHash.ui.voteRollover.updvote()
                },
                advance: function(e) {
                    plugHash.session.dj = e.dj, $("#yt-frame").attr("allowfullscreen", "")
                },
                historyUpdate: function() {
                    var e = API.getMedia(),
                        s = API.getDJ();
                    if (e && s && (plugHash.modules.getHistoryModule(), plugHash.settings.staffTools.historyAlert && plugHash.modules.history)) {
                        var t = plugHash.modules.history.toJSON();
                        t.shift();
                        var a = t.filter(function(s) {
                            return s.media.toJSON().cid == e.cid
                        });
                        if (a.length) {
                            var o = plugHash.modules.util,
                                n = a[0],
                                i = t.indexOf(n),
                                l = t.length,
                                u = n.user.username,
                                r = o.formatTimeLeading(o.getSecondsElapsed(n.timestamp)),
                                g = plugHash.utils.replaceLang(plugHash.session.lang.loaded.notifications.songAdvance.history, {
                                    position: i + 1,
                                    total: l,
                                    times: a.length,
                                    time: r,
                                    user: u
                                });
                            plugHash.utils.addChat("log", g, "history-white", s)
                        }
                    }
                },
                voteUpdate: function(e) {
                    plugHash.ui.voteRollover.vote(e), plugHash.settings.notifications.currentSong.woot && 1 == e.vote ? plugHash.utils.addChat("woot", plugHash.session.lang.loaded.notifications.user.userWooted, "woot", e.user) : plugHash.settings.notifications.currentSong.meh && -1 == e.vote && plugHash.utils.addChat("meh", plugHash.session.lang.loaded.notifications.user.userMehd, "meh", e.user)
                },
                userJoin: function(e) {
                    plugHash.settings.notifications.join.user && plugHash.utils.addChat("userJoined", plugHash.session.lang.loaded.notifications.user.userJoined, "community-users", e)
                },
                _userLeave: function(e) {
                    if (plugHash.settings.notifications.leave.user) {
                        var s = plugHash.session.lang.loaded.notifications.user,
                            t = plugHash.session.waitList.filter(function(s) {
                                return s.id == e.id
                            })[0],
                            a = plugHash.session.waitList.indexOf(t) + 1,
                            o = plugHash.session.dj,
                            n = a > 0 || o && o.id == e.id,
                            i = n ? s.userDC + (a > 0 ? a : "DJ") : s.userLeft;
                        plugHash.utils.addChat("userLeft", i, "community-users", e)
                    }
                },
                userLeave: function(e) {},
                guestJoin: function(e) {
                    plugHash.settings.notifications.join.user && plugHash.utils.addChat("userJoined", plugHash.session.lang.loaded.notifications.guestJoin, "users-white")
                },
                guestLeave: function(e) {
                    plugHash.settings.notifications.leave.user && plugHash.utils.addChat("userLeft", plugHash.session.lang.loaded.notifications.guestLeave, "users-white")
                },
                grabUpdate: function(e) {
                    if (plugHash.settings.notifications.currentSong.grab) {
                        var s = API.getMedia(),
                            t = plugHash.session.lang.loaded;
                        2 == s.format ? SC.get("/tracks/" + s.cid, function(a) {
                            plugHash.utils.addChat("userGrabbed", t.notifications.user.userGrabbed + '<br /><a href="' + a.permalink_url + '" target="_blank">' + s.author + " - " + s.title + "</a>", "grab", e.user)
                        }) : plugHash.utils.addChat("userGrabbed", t.notifications.user.userGrabbed + '<br /><a href="https://youtu.be/' + s.cid + '" target="_blank">' + s.author + " - " + s.title + "</a>", "grab", e.user)
                    }
                },
                waitListUpdate: function(e) {
                    plugHash.session.waitList = e
                },
                chatCommand: function(e) {
                    var s = e.substr(1).trim().split(" "),
                        t = s.shift().toLowerCase();
                    plugHash.commands.hasOwnProperty(t) && "function" == typeof plugHash.commands[t] && plugHash.commands[t](e, s)
                }
            },
            modules: {
                lockedChange: function() {
                    plugHash.events.modules.waitListChange()
                },
                waitListChange: function() {
                    plugHash.settings.autoJoin && plugHash.events.modules.utils.joinBooth()
                },
                changeGuests: function(e) {
                    var s = e.previousAttributes().guests,
                        t = e.changedAttributes().guests;
                    t > s && API.trigger("guestJoin", t), s > t && API.trigger("guestLeave", t)
                },
                beforeChat: function(e) {
                    plugHash.settings.chatMentions && plugHash.settings.chatMentionsArray.length > 0 && plugHash.utils.customMention(e), plugHash.settings.customEmotes && plugHash.utils.emotes.replaceEmotes(e)
                },
                afterChat: function(e) {
                    var s = $('div[data-cid="' + e.cid + '"]');
                    plugHash.ui.addDeleteButton(e);
                    var t = API.getUser(e.uid),
                        a = t && Math.max(t.role, t.gRole) > API.ROLE.BOUNCER;
                    if (plugHash.settings.afkEnabled && a && e.message.match(/^!afkdisable/i) && ($("#afkMessage").click(), API.sendChat("@" + e.un + " AFK Message disabled"), plugHash.utils.addChat("log", e.un + plugHash.session.lang.loaded.commands.afkDisable, "unignore")), plugHash.settings.autoJoin && a && e.message.match(/^!joindisable/i) && ($("#autoJoin").click(), API.sendChat("@" + e.un + " Auto Join disabled"), plugHash.utils.addChat("log", e.un + plugHash.session.lang.loaded.commands.joinDisable, "join-waitlist")), plugHash.settings.afkEnabled) {
                        var o = (new Date).getTime(),
                            n = API.getUser(),
                            i = o > plugHash.session.afkMessage.chat.lastSent + 3e5 && n && -1 != e.message.indexOf("@" + n.username);
                        i && API.sendChat("[AFK] @" + e.un + " " + (plugHash.settings.afkMessage || plugHash.session.lang.loaded.settings.afkMessageDefault)), (i || n && e.uid == n.id) && (plugHash.session.afkMessage.chat.lastSent = o)
                    }
                    if (s.length) {
                        for (var l = plugHash.utils.team.getRole(e.uid).reverse(), u = s.find(".from"); l.length > 0 && u.length > 0;) u.prepend('<i class="icon rank rank-' + l.pop() + '"></i>');
                        s.addClass("communityRole-" + plugHash.consts.plugRoles[t.role])
                    }
                },
                roomJoined: function() {
                    var e = API.getUser().vote;
                    plugHash.settings.voting.autoWoot && 0 == e && plugHash.utils.votes.woot(), plugHash.settings.voting.autoMeh && 0 == e && plugHash.utils.votes.meh(), plugHash.settings.voting.autoGrab && plugHash.utils.votes.grab(plugHash.settings.voting.silentGrab), plugHash.settings.autoJoin && plugHash.events.modules.utils.joinBooth(), plugHash.session.dj = API.getDJ, plugHash.session.waitList = API.getWaitList(), plugHash.session.autoLeave.played = 0, plugHash.ui.voteRollover.updvote(), plugHash.modules.getHistoryModule()
                },
                mediaChange: function(e) {
                    e && e.set("remaining", e.get("duration") - e.get("elapsed"))
                },
                mediaChangeRemaining: function(e) {
                    0 == API.getUser().vote && plugHash.settings.voting.reverseWoot && 10 == e.changedAttributes().remaining && plugHash.utils.votes.woot(!0)
                },
                userRolloverChange: function(e, s, t) {
                    var a = plugHash.modules.rollover,
                        o = a.user;
                    if (a._showSimple(e, s, t), o !== e) {
                        var n = API.getUser();
                        n.gRole || a.$meta.hasClass("user-id") || (a.$meta.addClass("has-id"), a.$meta.has(".user-id").length || a.$meta.append('<span class="user-id"></span>'), a.$meta.find(".user-id").text(plugHash.session.lang.loaded.misc.rolloverID + e.get("id"))), a.$meta.find('i[class*="rank rank-"]').remove();
                        for (var i = plugHash.utils.team.getRole(e.get("id")); i.length > 0;) a.$meta.find(".status").prepend('<i class="icon rank rank-' + i.pop() + '"></i>')
                    }
                },
                utils: {
                    canUserJoin: function() {
                        if (null == plugHash.modules.booth || null == plugHash.modules.waitlist) return !1;
                        var e = plugHash.modules.booth.toJSON(),
                            s = plugHash.modules.waitlist,
                            t = API.getUser();
                        return t && !s.isTheUserPlaying && !s.isTheUserWaiting && s.length < 50 && ((t.role > API.ROLE.NONE || t.gRole) && e.isLocked || !e.isLocked)
                    },
                    joinBooth: function() {
                        this.canUserJoin && API.djJoin()
                    }
                }
            },
            window: {
                resize: function() {
                    plugHash.ui.voteRollover.resize()
                },
                toggleNavigationPrevention: function(e) {
                    var s = plugHash.session.lang.loaded.settings.accidentalNavigationMSG,
                        t = !(null === e || void 0 === e);
                    return t && 1 == e || !t && (null == window.onbeforeunload() || window.onbeforeunload().toString() != s) ? window.onbeforeunload = function() {
                        return s
                    } : (t && 0 == e || !t && null != window.onbeforeunload()) && (window.onbeforeunload = function() {
                        return null
                    }), null !== window.onbeforeunload()
                }
            }
        },
        modules: {
            _array: [],
            require: require.s.contexts._.defined,
            media: null,
            events: null,
            user: null,
            users: null,
            rollover: null,
            settings: null,
            compress: null,
            booth: null,
            room: null,
            score: null,
            urls: null,
            emojis: null,
            playlists: null,
            waitlist: null,
            lang: null,
            util: null,
            chat: null,
            history: null,
            utils: {
                chat: {
                    chat: null,
                    resetType: function() {
                        var e = plugHash.modules.chat;
                        return e && e.chatView && (e.chatView.lastType = null)
                    }
                },
                playlists: {
                    getActive: function() {
                        return this.get(plugHash.modules.playlists.getActiveID())
                    },
                    get: function(e) {
                        var s = plugHash.modules.playlists.get(e);
                        return s ? s.toJSON() : null
                    },
                    getAll: function() {
                        return plugHash.modules.playlists.toJSON()
                    }
                }
            },
            init: function() {
                var e = this;
                $.each(this.require, function(s, t) {
                    t && (e._array.push(t), e.waitlist = null != t.isTheUserWaiting ? t : e.waitlist, e.events = t._events && t._events["chat:receive"] ? t : e.events, e.media = t.attributes && t.attributes.hasOwnProperty("media") ? t : e.media, e.booth = t.attributes && t.attributes.hasOwnProperty("waitingDJs") ? t : e.booth, e.user = t.attributes && null != t.attributes.username ? t : e.user, e.room = t.attributes && null != t.attributes.joinTime ? t : e.room, e.users = t._events && null != t._events["change:avatarID"] ? t : e.users, e.score = t._events && null != t._events["change:positive"] ? t : e.score, e.playlists = "undefined" != typeof t.activeMedia ? t : e.playlists, e.urls = "undefined" != typeof t.scThumbnail ? t : e.urls, e.emojis = "undefined" != typeof t.replace_colons ? t : e.emojis, e.compress = t.decompressFromUTF16 && t.compressToUTF16 ? t : e.compress, e.rollover = t.el && "user-rollover" == t.el.id ? t : e.rollover, e.settings = t.settings ? t : e.settings, e.util = t.isorx ? t : e.util, e.chat = t.chatView ? t : e.chat)
                }), this.lang = this.require["lang/Lang"], this.getHistoryModule()
            },
            getHistoryModule: function() {
                var e = plugHash.modules;
                !e.history && e.media && e.media.get("historyID") && e._array.forEach(function(s, t) {
                    if ("object" == typeof s && "function" == typeof s.findWhere) {
                        var a = s.findWhere({
                            id: e.media.get("historyID")
                        });
                        return a && (e.history = s), null == e.history
                    }
                })
            }
        },
        storage: {
            save: function() {
                plugHash.settings.version = plugHash.consts.version, localStorage.phash = JSON.stringify(plugHash.settings)
            },
            load: function() {
                try {
                    var e = JSON.parse(localStorage.phash);
                    plugHash.settings.version = plugHash.consts.version, plugHash.settings = $.extend({}, plugHash.settings, e)
                } catch (s) {}
            }
        },
        init: function() {
            window.pHash = !0, plugHash.storage.load(), plugHash.modules.init(), plugHash.utils.team.loadTeam();
            var e = plugHash.settings.lang || API.getUser().language || plugHash.settings.defaultLang;
            plugHash.utils.loadLang(e, function(s) {
                plugHash.session.lang.language = e, plugHash.session.dj = API.getDJ(), plugHash.session.currentUser = API.getUser(), plugHash.loadEvents(), plugHash.ui.loadUI(), plugHash.ui.loadCSS(plugHash.consts.links.css), plugHash.utils.emotes.getEmotes();
                var t = plugHash.modules.utils.playlists.getActive();
                plugHash.settings.voting.grabTo = t ? t.id : null, plugHash.events.modules.roomJoined();
                var a = plugHash.consts.version.string + " " + plugHash.session.lang.loaded.running;
                plugHash.utils.addSpecial("hash", a, "rank rank-hash")
            }), "undefined" == typeof API._dispatch && (API._dispatch = API.dispatch, API.dispatch = function(e, s) {
                API.trigger("_" + e, s), API._dispatch(e, s)
            }), "undefined" == typeof RegExp.escape && (RegExp.escape = function(e) {
                return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")
            })
        },
        kill: function() {
            plugHash.modules.events.trigger("tooltip:hide"), plugHash.stopEvents(), plugHash.ui.unloadCSS(), plugHash.ui.unloadUI(), plugHash.utils.addChat("log", plugHash.session.lang.loaded.killmsg, "dialog-close"), window.pHash = !1, delete window.pHash, plugHash = void 0
        },
        loadEvents: function() {
            API.on(plugHash.events.API);
            var e = plugHash.modules;
            null != e.booth && (e.booth.on("change:isLocked", plugHash.events.modules.lockedChange), e.booth.on("change:waitingDJs", plugHash.events.modules.waitListChange)), null != e.room && e.room.on("change:guests", plugHash.events.modules.changeGuests), null != e.events && (e.events.on("chat:receive", plugHash.events.modules.beforeChat), e.events._events["chat:receive"].unshift(plugHash.modules.events._events["chat:receive"].pop()), e.events.on("chat:receive", plugHash.events.modules.afterChat), e.events.on("room:joined", plugHash.events.modules.roomJoined)), null != e.media && (e.media.on("change:media", plugHash.events.modules.mediaChange), e.media.on("change:remaining", plugHash.events.modules.mediaChangeRemaining));
            if (!e.rollover._showSimple) {
                e.rollover._showSimple = e.rollover.showSimple, e.rollover.showSimple = function() {
                    for (var i in e.rollover._events.showSimple) {
                        var cur = e.rollover._events.showSimple[i];
                        cur.callback.apply(cur.context, arguments);
                    }
                };
                e.rollover.on('showSimple', e.rollover._showSimple, e.rollover);
            }
            e.rollover.on('showSimple', plugHash.events.modules.userRolloverChange, e.rollover);
            e.rollover._events.showSimple.unshift(e.rollover._events.showSimple.pop());
        },
        stopEvents: function() {
            API.off(plugHash.events.API);
            var e = plugHash.modules;
            null != e.booth && (e.booth.off("change:isLocked", plugHash.events.modules.lockedChange), e.booth.off("change:waitingDJs", plugHash.events.modules.waitListChange)), null != e.room && e.room.off("change:guests", plugHash.events.modules.changeGuests), null != e.events && (e.events.off("chat:receive", plugHash.events.modules.beforeChat), e.events.off("chat:receive", plugHash.events.modules.afterChat), e.events.off("room:joined", plugHash.events.modules.roomJoined)), null != e.media && (e.media.off("change:media", plugHash.events.modules.mediaChange), e.media.off("change:remaining", plugHash.events.modules.mediaChangeRemaining)), e.rollover.off('showSimple', plugHash.events.modules.userRolloverChange, e.rollover);
        }
    };
    plugHash.init()
}
